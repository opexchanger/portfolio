import Head from 'next/head';
import Image from 'next/image';
import styles from '../styles/Home.module.css';

export default function Home() {
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Flávio Neto</h1>

        <p className={styles.description}>
          Confira uma parte dos meus projetos:
        </p>

        <div className={styles.grid}>
          <div className={styles.card}>
            <h2>React</h2>
            <a
              href='https://crwn-clothing-seven.vercel.app/'
              target='_blank'
              className={styles.link}
            >
              <h4>Página de loja com carrinho de compras &rarr;</h4>
            </a>
            <p>Tecnologias</p>
            <ul>
              <li>React</li>
              <li>Redux</li>
              <li>React Router</li>
            </ul>
            <p>Review</p>
            <ul>
              <p>
                Projeto para treino focado nas funcionalidades básicas de
                roteamento do React, e construção de um carrinho de compras
                utilizando Redux para manter o estado da aplicação, com reducers
                para adicionar e remover itens do carrinho. Hoje em dia,
                entretanto, para a maioria dos projetos, considero mais
                eficiente o uso da Context API.
              </p>
            </ul>
          </div>

          <div className={styles.card}>
            <h2>Web Development</h2>
            <a
              href='https://opexchanger.github.io/coccamp/'
              target='_blank'
              className={styles.link}
            >
              <h4>Site para empresa de exportação de café &rarr;</h4>
            </a>
            <p>Tecnologias</p>
            <ul>
              <li>HTML, CSS, JS</li>
              <li>SASS</li>
              <li>11ty com Sanity</li>
            </ul>
            <p>Review</p>
            <ul>
              <p>
                Site programado a partir de um layout produzido por designer,
                que se tornou uma cópia exata do modelo proposto, completamente
                responsivo e adicionadas as funcionalidades. Como última etapa,
                o site será gerado com o 11ty que permite geração de sites
                estáticos de uma forma simples e minimalista, e também conectado
                à uma instância do Sanity que permite ao cliente atualizar todos
                os textos através do painel.
              </p>
            </ul>
            <p className={styles.red}>
              Em andamento. A fazer: otimização das imagens, que serão
              convertidas para webp; integração com o CMS para tornar o conteúdo
              dinâmico.
            </p>
          </div>

          <div className={styles.card}>
            <h2>Web Development</h2>
            <a
              href='https://opexchanger.github.io/proa/'
              target='_blank'
              className={styles.link}
            >
              <h4>Site de agência de viagens &rarr;</h4>
            </a>
            <p>Tecnologias</p>
            <ul>
              <li>HTML, CSS, JS</li>
              <li>SASS</li>
              <li>Next.js com Sanity</li>
            </ul>
            <p>Review</p>
            <ul>
              <p>
                Mais um site para cliente, este um pouco mais complexo pois
                pretende abarcar todos os casos de uso do negócio de viagens. O
                design foi baseado em layout, e produzido de forma adaptada
                conforme a identidade visual da agência.
              </p>
            </ul>
            <p className={styles.red}>
              Em andamento. A fazer: otimização das imagens, que devem vir do
              departamento de design e no momento estão em png, serão
              convertidas para webp.
            </p>
          </div>

          <div className={styles.card}>
            <h2>React</h2>
            <a
              href='https://next-blog-frontend.vercel.app/'
              target='_blank'
              className={styles.link}
            >
              <h4>Blog em Next.Js &rarr;</h4>
            </a>
            <p>Tecnologias</p>
            <ul>
              <li>Next.js</li>
              <li>Sanity (Headless CMS)</li>
              <li>Typescript</li>
            </ul>
            <p>Review</p>
            <ul>
              <p>
                Projeto para aprender Next.js e treinar Typescript. Sem foco no
                layout, as funcionalidades simples são a de através do Sanity
                poder acessar o painel por onde atualizamos as informações e
                postagens do blog. As estruturas de dados foram previamente
                criadas, e utilizam o formato de dados baseados em documentos
                que lembra um NoSql como MongoDB. Do lado do Next.js, temos a
                incrível capacidade que o framework oferece de decidir como
                queremos renderizar as nossas páginas, podendo escolher entre
                estático, estático incremental ou server-side, isso para cada
                uma delas individualmente. Especialmente o estático incremental
                (ISR) me chama a atenção por unir os dois mundos e permitir
                páginas dinâmicas atualizadas (quase) em tempo real com a
                estabilidade de páginas estáticas.
              </p>
            </ul>
          </div>
        </div>
      </main>
    </div>
  );
}
