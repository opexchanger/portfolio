import Head from 'next/head';
import Image from 'next/image';
import styles from '../styles/Home.module.css';

export default function Home() {
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Flávio Neto</h1>

        <p className={styles.description}>
          Confira uma parte dos meus projetos:
        </p>

        <div className={styles.grid}>
          <div className={styles.card}>
            <h2>Projeto real</h2>
            <a
              href='https://coccamp.netlify.app'
              target='_blank'
              className={styles.link}
            >
              <h4>Site para empresa de exportação de café &rarr;</h4>
            </a>
            <p>Tecnologias</p>
            <ul>
              <li>HTML, CSS, JS</li>
              <li>SASS</li>
              <li>11ty com Sanity</li>
            </ul>
            <p>Overview</p>
            <ul>
              <p>
                Site desenvolvido a partir de um layout produzido por designer,
                que se tornou uma cópia exata do modelo proposto, completamente
                responsivo e adicionadas as funcionalidades. Além da interface,
                foi adicionado dinamismo ao site através de integração com o
                11ty, um Static Site Generator (como o Gatbsy para o React)
                simples e minimalista, e conexão à uma instância do Sanity (um
                CMS Headless) que permite ao cliente atualizar todos os textos
                através do painel. Deploy na Netlify.
              </p>
            </ul>
            <p>
              Repo:{' '}
              <a
                className={styles.link}
                href='https://github.com/opexchanger/coccamp-monorepo'
                target='_blank'
              >
                Github
              </a>
            </p>
            <br />
            <p className={styles.small}>
              Próxima etapa: ajustes de desempenho baseados no Google Page Speed
              e campanha de SEO.
            </p>
          </div>

          <div className={styles.card}>
            <h2>Projeto treino</h2>
            <a
              href='https://crwn-clothing-seven.vercel.app/'
              target='_blank'
              className={styles.link}
            >
              <h4>Página de loja com carrinho de compras &rarr;</h4>
            </a>
            <p>Tecnologias</p>
            <ul>
              <li>React</li>
              <li>Redux</li>
              <li>React Router</li>
            </ul>
            <p>Overview</p>
            <ul>
              <p>
                Projeto para treino focado nas funcionalidades básicas de
                roteamento do React, e lógica de um carrinho de compras para
                praticar Redux gerenciando o estado da aplicação. Em meus
                projetos subsequentes, experimentei também com a Context API,
                que até agora me parece uma maneira mais simples de obter o
                mesmo efeito.
              </p>
            </ul>
            <p>
              Repo:{' '}
              <a
                className={styles.link}
                href='https://github.com/opexchanger/crwn-clothing'
                target='_blank'
              >
                Github
              </a>
            </p>
          </div>

          <div className={styles.card}>
            <h2>Projeto Real</h2>
            <a
              href='https://opexchanger.github.io/proa/'
              target='_blank'
              className={styles.link}
            >
              <h4>Site de agência de viagens &rarr;</h4>
            </a>
            <p>Tecnologias</p>
            <ul>
              <li>HTML, CSS, JS</li>
              <li>SASS</li>
              <li>Next.js com Sanity</li>
            </ul>
            <p>Overview</p>
            <ul>
              <p>
                Mais um site para cliente, o design foi baseado em template, e
                produzido de forma adaptada conforme a identidade visual da
                agência. O CMS deste projeto possui mais complexidade pois
                pretende abarcar todos os casos de uso do negócio de viagens.
              </p>
            </ul>
            <p>
              Repo:{' '}
              <a
                className={styles.link}
                href='https://github.com/opexchanger/proa'
                target='_blank'
              >
                Github
              </a>
            </p>
            <p className={styles.small}>
              Em andamento. A fazer: otimização das imagens, terminar
              modelamento do cadastro de viagens para conectar com o CMS.
            </p>
          </div>

          <div className={styles.card}>
            <h2>Projeto treino</h2>
            <a
              href='https://next-blog-frontend.vercel.app/'
              target='_blank'
              className={styles.link}
            >
              <h4>Blog em Next.Js &rarr;</h4>
            </a>
            <p>Tecnologias</p>
            <ul>
              <li>Next.js</li>
              <li>Sanity</li>
              <li>Typescript</li>
            </ul>
            <p>Overview</p>
            <ul>
              <p>
                Projeto para aprender Next.js e treinar Typescript. Sem foco no
                layout, as funcionalidades são a de atualizar o blog através do
                Sanity mantendo o front 'estático'. As estruturas de dados do
                Sanity utilizam o formato de documentos que lembra um NoSql como
                MongoDB. Do lado do Next.js, temos a incrível capacidade que o
                framework oferece de decidir como queremos renderizar as nossas
                páginas, podendo criar inclusive uma mistura entre estático,
                estático incremental ou server-side. Especialmente o estático
                incremental (ISR) me chama a atenção por unir os dois mundos e
                permitir páginas dinâmicas atualizadas (quase) em tempo real com
                a estabilidade de páginas estáticas.
              </p>
            </ul>
            <p>
              Repo:{' '}
              <a
                className={styles.link}
                href='https://github.com/opexchanger/next-blog-frontend'
                target='_blank'
              >
                Github
              </a>
            </p>
          </div>
        </div>
      </main>
    </div>
  );
}
